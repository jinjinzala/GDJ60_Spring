<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.iu.s1.bankBook.BankBookDAO">
    
      <sql id="searchCondition">
       <if test="kind == 'contents'">
          WHERE BOOKDETAIL LIKE '%' || #{search} || '%'
       </if>
       
       <if test="kind == 'title'">
          WHERE BOOKNAME LIKE '%' || #{search} || '%'
       </if>
    </sql>
    
    <sql id="searchCondition2">
       WHERE 
         <choose>
            <when test="kind == 'contents'">
               BOOKDETAIL
            </when>
            <otherwise>
               BOOKNAME
            </otherwise>
         </choose>   
      LIKE '%' || #{search} || '%'
    </sql>
  
  
    <!-- 전체 row의 갯수를 가져오는것 -->
     <select id="getBankBookCount"    parameterType="Pager" resultType="Long">
     SELECT COUNT(BOOKNUMBER)  FROM BANKBOOK
      <include refid="searchCondition"></include>
     </select>
     
     
     <select id="getBankBookList" parameterType="Pager" resultType="BankBookDTO">
   SELECT * FROM 
	(
	SELECT ROWNUM R, B.* FROM 
			(SELECT * FROM BANKBOOK 
			<include refid="searchCondition2"></include>
			ORDER BY BOOKNUMBER DESC )
			 B 
			)
	WHERE R BETWEEN #{startRow} AND  #{lastRow}
   
   </select>
   
    <select id="getBookNumber" resultType="Long">
  	SELECT BANKNUM_SEQ.NEXTVAL FROM DUAL
	</select>
     
    <!-- <select id ="getBankBookList" resultType="BankBookDTO" statementType="PREPARED"> 
     SELECT * 
     FROM BANKBOOK
     WHERE BOOKNUMBER > (SELECT MAX(BOOKNUMBER) FROM BANKBOOK)
     ORDER BY BOOKNUMBER DESC
    </select> -->
    
    
    <select id="getBankBookDetail" parameterType="BankBookDTO" resultMap="bankBookDetailResult">
		SELECT B.*,BI.* FROM BANKBOOK B
		LEFT OUTER JOIN BANKBOOKIMG BI
		ON (B.BOOKNUMBER  = BI.BOOKNUMBER)
		WHERE B.BOOKNUMBER = #{bookNumber}
    </select>
    
    <!--type=""에는 최종리턴타입  -->
    <resultMap type="BankBookDTO" id="bankBookDetailResult">
     	<!--Primary Key  -->
    	<id column="BOOKNUMBER" property="bookNumber" />
    	<!-- 그외 나머지 -->
    	<result column="BOOKNAME" property="bookName" />
    	<result column="BOOKDETAIL" property="bookDetail" />
    	<result column="BOOKRATE" property="bookRate" />
    	<result column="BOOKSALE" property="bookSale" />
    	
    	<!-- 1:1 관계일 때 -->
    	<association property="bankBookImgDTO" javaType="BankBookImgDTO">
    	<!-- id는 뱅크북이미지의 pk  -->
    	<id  column="FILENUM"  property="fileNum" />
    	<result  column="FILENAME" property="fileName"/>
    	<result  column="ORINAME" property="oriName"/>
    	<!-- 1:n 관계일 때  -->
    	<!-- <collection property=""></collection> -->
    	</association>
    </resultMap>
	    
 	<delete id="setBankBookDelete" parameterType="Long">
	  DELETE BANKBOOK WHERE BOOKNUMBER = #{bookNumber}
    </delete>
	
     <insert id="setBankBookAdd"  parameterType="BankBookDTO" > 
     <selectKey keyProperty="bookNumber" resultType="Long" order="BEFORE">
      SELECT BANKNUM_SEQ.NEXTVAL FROM DUAL
     </selectKey>
		INSERT INTO BANKBOOK
		VALUES (#{bookNumber} ,#{bookName},#{bookRate},#{bookSale},#{bookDetail})
     </insert>
	
	
	 <!-- 업데이트 구분 만들기 _숙제 --> 
	 <!--parameterType="BankBookDTO" 이고 엘리어스에 끄적여놔서 되는거임   --> 
	 <!--컬럼명이랑 멤버변수랑 동일하게 만들기    --> 
	 <!--DAO에서 호출    --> 
	 <!-- #{bookNumber}파라미터로 받은 게터의 이름  --> 
	 
	 <update id="setBankBookUpdate" parameterType="BankBookDTO" >
	  UPDATE BANKBOOK
	  SET BOOKNAME = #{bookName}, BOOKRATE = #{bookRate}, BOOKSALE = #{bookSale}, BOOKDETAIL = #{bookDetail}
	  WHERE BOOKNUMBER = #{bookNumber}
	 </update>   
	  
	  <insert id="setBankBookImgAdd" parameterType="BankBookImgDTO">
	  INSERT INTO BANKBOOKIMG
	  VALUES (BANKNUM_SEQ.NEXTVAL, #{fileName}, #{oriName}, #{bookNumber})
	  </insert>
	 
	    
    </mapper>
    
    